# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAl6wvzzrYo733svr2f9xJpUQ1sNps3r
"""
"""
Model diagnostic & repair helper

Usage:
  1. Place this script on your machine where you can run Python.
  2. Make sure you have required packages installed:
       pip install gdown tensorflow h5py numpy
  3. Run:
       python diagnose_gdrive_model.py

This script will:
  - Download the model file from the provided Google Drive file id
  - Inspect the downloaded file (size, extension, HDF5 keys if applicable)
  - Try multiple ways to load the model (tf.keras.load_model, tf.saved_model.load)
  - If loaded, print model.summary() and run a quick dummy prediction
  - Save a diagnostic report to `model_diagnostic_report.txt`

If loading fails, the script captures the full traceback to the report file so you can paste it here.
"""

import os
import sys
import traceback
import tempfile
import gdown
import h5py
import numpy as np

try:
    import tensorflow as tf
    from tensorflow.keras.models import load_model
except Exception as e:
    print("TensorFlow import failed:", e)
    print("Install TensorFlow (compatible version) and re-run. E.g.: pip install tensorflow")
    sys.exit(1)

# ---------- CONFIG ----------
GDRIVE_FILE_ID = "1j9WY-YbR4G-aRuv69C15WvF2CosN9KQ8"  # from your link
DOWNLOAD_NAME = "resNet_model_SGD.keras"
REPORT_PATH = "model_diagnostic_report.txt"
IMAGE_SIZE = (224, 224)
DUMMY_BATCH = 1
# ----------------------------

report_lines = []

def writeln(s=""):
    print(s)
    report_lines.append(str(s))


def save_report():
    with open(REPORT_PATH, "w", encoding="utf-8") as f:
        f.write("\n".join(report_lines))
    writeln(f"\nDiagnostic report saved to: {REPORT_PATH}")


def download_from_gdrive(file_id, out_name):
    url = f"https://drive.google.com/uc?id={file_id}"
    writeln(f"Downloading from: {url}")
    try:
        gdown.download(url, out_name, quiet=False)
        writeln(f"Downloaded to: {out_name}")
        return out_name
    except Exception as e:
        writeln("Download failed:")
        writeln(traceback.format_exc())
        return None


def file_info(path):
    try:
        st = os.stat(path)
        writeln(f"File: {path}")
        writeln(f" - Size: {st.st_size} bytes")
        writeln(f" - Modified: {os.path.getmtime(path)}")
        writeln(f" - Extension: {os.path.splitext(path)[1]}")
    except Exception as e:
        writeln(f"Cannot stat file: {e}")


def inspect_hdf5(path):
    try:
        writeln("\nInspecting as HDF5 file (h5py)...")
        with h5py.File(path, 'r') as f:
            writeln("Top-level HDF5 keys:")
            for k in f.keys():
                writeln(f"  - {k}")
            # show model config presence
            if 'model_config' in f.keys() or 'keras_version' in f.keys():
                writeln("Looks like a Keras HDF5 model file.")
            else:
                writeln("HDF5 file but doesn't look like a standard Keras HDF5 model (may still be weights-only).")
    except Exception as e:
        writeln("h5py inspection failed (file may not be HDF5)")
        writeln(traceback.format_exc())


def try_load_model(path):
    writeln('\nAttempting tf.keras.models.load_model(path, compile=False)')
    try:
        m = load_model(path, compile=False)
        writeln("Model loaded with tf.keras.models.load_model().")
        try:
            writeln("Model summary:")
            m.summary(print_fn=lambda s: writeln(s))
        except Exception:
            writeln("Could not print summary (some models don't support it here).")
        # try a dummy predict
        try:
            inp_shape = (DUMMY_BATCH,) + IMAGE_SIZE + (3,)
            writeln(f"Trying dummy predict with input shape: {inp_shape}")
            x = np.random.rand(*inp_shape).astype(np.float32)
            pred = m.predict(x)
            writeln(f"Dummy predict output shape: {getattr(pred, 'shape', 'unknown')}")
        except Exception:
            writeln("Dummy predict failed:")
            writeln(traceback.format_exc())
        return True
    except Exception:
        writeln("load_model failed with exception:")
        writeln(traceback.format_exc())
        return False


def try_saved_model_load(path):
    writeln('\nTrying tf.saved_model.load(path)')
    try:
        obj = tf.saved_model.load(path)
        writeln("tf.saved_model.load succeeded. Object type: {}".format(type(obj)))
        # If saved_model is a Keras SavedModel, try keras load_model as well
        try:
            writeln('Also trying tf.keras.models.load_model on the same path...')
            m = tf.keras.models.load_model(path, compile=False)
            writeln('tf.keras.models.load_model succeeded for SavedModel.')
            m.summary(print_fn=lambda s: writeln(s))
            return True
        except Exception:
            writeln('tf.keras.models.load_model on the SavedModel path failed:')
            writeln(traceback.format_exc())
            return True
    except Exception:
        writeln('tf.saved_model.load failed:')
        writeln(traceback.format_exc())
        return False


def main():
    writeln('*** Model Diagnostic Script ***')
    # Download
    path = DOWNLOAD_NAME
    if not os.path.exists(path):
        downloaded = download_from_gdrive(GDRIVE_FILE_ID, path)
        if not downloaded:
            save_report()
            return
    else:
        writeln(f"Model file already exists: {path}")

    file_info(path)

    # Basic file-type heuristics
    ext = os.path.splitext(path)[1].lower()
    if ext in ['.h5', '.hdf5', '.keras']:
        inspect_hdf5(path)

    # Try tf.keras.load_model
    loaded = try_load_model(path)
    if loaded:
        save_report()
        return

    # If path is a file that might be a zip or SavedModel dir, try saved_model
    # If it's a directory, try saved_model directly
    if os.path.isdir(path):
        writeln('\nGiven model path is a directory; trying SavedModel loading...')
        if try_saved_model_load(path):
            save_report()
            return

    # Try extracting if it's actually a zip (some people upload zips)
    writeln('\nChecking if file is a ZIP archive...')
    try:
        import zipfile
        if zipfile.is_zipfile(path):
            tmpd = tempfile.mkdtemp()
            writeln(f"ZIP file detected — extracting to {tmpd}")
            with zipfile.ZipFile(path, 'r') as z:
                z.extractall(tmpd)
            # look for SavedModel or .h5 inside
            candidates = []
            for root, dirs, files in os.walk(tmpd):
                for f in files:
                    if f.lower().endswith(('.h5', '.hdf5', '.keras')):
                        candidates.append(os.path.join(root, f))
                if 'saved_model.pb' in files:
                    candidates.append(root)
            writeln('Found candidates inside ZIP:')
            for c in candidates:
                writeln('  - ' + c)
            for c in candidates:
                if os.path.isdir(c) or c.endswith(('h5','hdf5','keras')):
                    writeln(f'Trying candidate: {c}')
                    if try_load_model(c):
                        save_report()
                        shutil.rmtree(tmpd, ignore_errors=True)
                        return
                    if os.path.isdir(c) and try_saved_model_load(c):
                        save_report()
                        shutil.rmtree(tmpd, ignore_errors=True)
                        return
            shutil.rmtree(tmpd, ignore_errors=True)
        else:
            writeln('Not a ZIP file.')
    except Exception:
        writeln('ZIP-check failed:')
        writeln(traceback.format_exc())

    # If we reach here, loading failed. Provide next-step recommendations.
    writeln('\n=== Summary: Could not load model automatically ===')
    writeln('Common causes and suggested actions:')
    writeln(' 1) Partial/Corrupted download — check file size. If <100KB, re-download.')
    writeln(' 2) TensorFlow version mismatch — try to use the same TF version used to save the model.')
    writeln('    Example: pip install tensorflow==2.10.0')
    writeln(' 3) Model uses custom layers / custom_objects — locate the custom class definitions and pass them to load_model via custom_objects or reimplement the layer.')
    writeln(' 4) File is weights-only (HDF5 with weights but no architecture) — you need the model architecture code (define model and load weights).')
    writeln(' 5) If file on Google Drive is corrupted, re-upload and ensure the upload completes.')

    writeln('\nPlease attach the generated report file (model_diagnostic_report.txt) or paste its contents here and I will help debug further.')
    save_report()


if __name__ == '__main__':
    main()


# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAl6wvzzrYo733svr2f9xJpUQ1sNps3r
"""

import os
import streamlit as st
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from collections import Counter
import gdown
from tensorflow.keras.models import load_model

# ---------- CONFIGURATION ----------
MODEL_URL = "https://drive.google.com/uc?export=download&id=1j9WY-YbR4G-aRuv69C15WvF2CosN9KQ8"
MODEL_PATH = "model.keras"
IMAGE_SIZE = (224, 224)
CLASS_DESCRIPTIONS = [
    'safe driving', 'texting right', 'talking on phone right',
    'texting left', 'talking on phone left', 'operating radio',
    'drinking', 'reaching behind', 'hair and makeup', 'talking to passenger'
]
TOP_K = 3
# -----------------------------------

@st.cache_resource(show_spinner=False)
def load_cnn_model():
    if not os.path.exists(MODEL_PATH):
        st.info("Downloading model from Google Drive...")
        gdown.download(MODEL_URL, MODEL_PATH, quiet=False)
    model = load_model(MODEL_PATH)
    st.success("Model loaded successfully!")
    return model

model = load_cnn_model()

st.title("Distracted Driver Detection")
st.markdown("Upload images (single or multiple) to get predictions and statistics.")

uploaded = st.file_uploader(
    "Upload driver images",
    type=['png', 'jpg', 'jpeg'],
    accept_multiple_files=True
)

if uploaded:
    st.subheader("Predictions")
    counter = Counter()

    for file in uploaded:
        img = Image.open(file).convert("RGB")
        st.image(img, caption="Input Image", use_column_width=False, width=250)

        arr = np.expand_dims(np.array(img.resize(IMAGE_SIZE)) / 255.0, axis=0)
        preds = model.predict(arr, verbose=0)[0]

        top_idx = np.argsort(preds)[::-1][:TOP_K]
        top_classes = [CLASS_DESCRIPTIONS[i] for i in top_idx]
        top_probs = preds[top_idx]

        counter[top_classes[0]] += 1

        fig, ax = plt.subplots()
        ax.barh(
            top_classes[::-1],
            top_probs[::-1],
            color=plt.get_cmap("tab10").colors
        )
        for i, v in enumerate(top_probs[::-1]):
            ax.text(v + 0.01, i, f"{v:.2f}", va='center', fontsize=9)
        ax.set_xlabel("Probability")
        ax.set_title("Top-3 Predictions")
        st.pyplot(fig)

    st.subheader("Aggregation: Prediction Counts")
    fig2, ax2 = plt.subplots(figsize=(8, 4))
    classes = list(counter.keys())
    counts = list(counter.values())
    colors = plt.get_cmap("tab10").colors[:len(classes)]
    ax2.bar(classes, counts, color=colors)
    for idx, val in enumerate(counts):
        ax2.text(idx, val + 0.1, str(val), ha='center', fontsize=10)
    ax2.set_ylabel("Number of Images")
    ax2.set_xticklabels(classes, rotation=45, ha='right', fontsize=9)
    ax2.grid(axis='y', linestyle='--', alpha=0.6)
    st.pyplot(fig2)
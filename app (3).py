# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAl6wvzzrYo733svr2f9xJpUQ1sNps3r
"""

import streamlit as st
import zipfile, io, os, random
import numpy as np
import pandas as pd
from collections import Counter
from PIL import Image
import matplotlib.pyplot as plt
import gdown
from tensorflow.keras.models import load_model

# إعداد الصفحة
st.set_page_config(page_title="Distracted Driver", layout="wide")
st.logo("assets/img5", size="large")  # شعار أعلى الصفحة :contentReference[oaicite:0]{index=0}
st.title("Distracted Driver Detection")

# إعداد التصنيفات
IMAGE_SIZE = (224, 224)
CLASS_DESC = [
    'safe driving','texting right','talking on phone right','texting left',
    'talking on phone left','operating radio','drinking','reaching behind',
    'hair and makeup','talking to passenger'
]

# تحميل النموذج بكفاءة
MODEL_PATH = "model.keras"
MODEL_URL = "https://drive.google.com/uc?export=download&id=1j9WY-YbR4G-aRuv69C15WvF2CosN9KQ8"

@st.cache_resource
def get_model():
    if not os.path.exists(MODEL_PATH):
        gdown.download(MODEL_URL, MODEL_PATH, quiet=False)
    return load_model(MODEL_PATH)

model = get_model()

# رفع الصور أو ملف ZIP
uploaded = st.file_uploader("Upload image(s) or ZIP file", type=['png','jpg','jpeg','zip'], accept_multiple_files=True)

if uploaded:
    images = []
    for f in uploaded:
        if f.name.lower().endswith('.zip'):
            with zipfile.ZipFile(io.BytesIO(f.read())) as zf:
                for fn in zf.namelist():
                    if fn.lower().endswith(('png','jpg','jpeg')):
                        img = Image.open(io.BytesIO(zf.read(fn))).convert("RGB")
                        images.append(img)
        else:
            images.append(Image.open(f).convert("RGB"))

    if images:
        preds, rows = [], []
        for img in images:
            arr = np.expand_dims(np.array(img.resize(IMAGE_SIZE))/255.0, axis=0)
            pred = model.predict(arr, verbose=0)[0]
            cls = CLASS_DESC[int(np.argmax(pred))]
            preds.append(cls)
            rows.append((cls, *pred))

        # تجميع التنبؤات وعرض المخطط التجميعي
        df_agg = pd.DataFrame(Counter(preds).items(), columns=["class","count"])
        st.subheader("Aggregate Predictions")
        st.bar_chart(df_agg.set_index("class"))

        # زر لتحميل CSV
        df_csv = pd.DataFrame(rows, columns=["class"] + CLASS_DESC)
        csv_bytes = df_csv.to_csv(index=False).encode("utf-8")
        st.download_button("Download CSV", csv_bytes, file_name="predictions.csv", mime="text/csv")

        # عرض عينات عشوائية حتى 6 صور
        st.subheader("Random Sample (up to 6)")
        sample = random.sample(images, min(6, len(images)))
        st.image(sample, width=150)
import streamlit as st
from pathlib import Path
import base64
from PIL import Image

# تحميل التطبيق
st.set_page_config(page_title="Distracted Driver Detection", layout="wide")
st.title("Distracted Driver Detection")

# دالة لوضع صورة "img5.png" في أعلى الشريط الجانبي
def set_sidebar_logo(image_filename: str, width="70%", padding_top="120px"):
    path = Path(__file__).parent / "assets" / image_filename
    if path.exists():
        img_bytes = base64.b64encode(path.read_bytes()).decode()
        img_type = path.suffix[1:]
        css = f"""
        <style>
        [data-testid="stSidebarNav"] {{
            background: url("data:image/{img_type};base64,{img_bytes}") no-repeat center top;
            background-size: {width} auto;
            padding-top: {padding_top};
        }}
        </style>
        """
        st.markdown(css, unsafe_allow_html=True)
    else:
        st.error(f"Image not found at: {path}")

# استدعاء الدالة
set_sidebar_logo("img5.png")
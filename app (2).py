# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAl6wvzzrYo733svr2f9xJpUQ1sNps3r
"""

import streamlit as st
import zipfile
import io
import os
import numpy as np
from collections import Counter
from PIL import Image
import matplotlib.pyplot as plt
import gdown
from tensorflow.keras.models import load_model

# ---- إعداد الصفحة ----
st.set_page_config(page_title="Distracted Driver Detector", layout="wide")
st.title("Distracted Driver Detection")
st.markdown("Upload individual images or a ZIP file. No per-image charts — just textual predictions and an aggregate summary if multiple images are uploaded.")

# ---- إعداد تصنيفات الفئات ----
IMAGE_SIZE = (224, 224)
CLASS_DESCRIPTIONS = [
    'safe driving', 'texting right', 'talking on phone right',
    'texting left', 'talking on phone left', 'operating radio',
    'drinking', 'reaching behind', 'hair and makeup', 'talking to passenger'
]

# ---- تحميل النموذج بكفاءة ----
MODEL_PATH = "model.keras"
MODEL_URL = "https://drive.google.com/uc?export=download&id=1j9WY-YbR4G-aRuv69C15WvF2CosN9KQ8"

@st.cache_resource
def load_model_once():
    if not os.path.exists(MODEL_PATH):
        st.info("Downloading model (this may take a minute)…")
        gdown.download(MODEL_URL, MODEL_PATH, quiet=False)
    st.success("Model loaded successfully!")
    return load_model(MODEL_PATH)

model = load_model_once()

# ---- رفع الصور أو ZIP ----
uploaded_files = st.file_uploader(
    "Upload images or a ZIP file",
    type=['png', 'jpg', 'jpeg', 'zip'],
    accept_multiple_files=True
)

def extract_images_from_zip(zipped_bytes):
    images = []
    with zipfile.ZipFile(io.BytesIO(zipped_bytes)) as zf:
        for filename in zf.namelist():
            if filename.lower().endswith(('.png','.jpg','.jpeg')):
                img_data = zf.read(filename)
                img = Image.open(io.BytesIO(img_data)).convert("RGB")
                images.append(img)
    return images

if uploaded_files:
    images = []
    for file in uploaded_files:
        if file.name.lower().endswith('.zip'):
            images.extend(extract_images_from_zip(file.read()))
        else:
            images.append(Image.open(file).convert("RGB"))

    if images:
        st.subheader("Predictions")
        pred_counter = Counter()

        for img in images:
            st.image(img, width=200, caption="Uploaded Image")
            arr = np.expand_dims(np.array(img.resize(IMAGE_SIZE))/255.0, axis=0)
            preds = model.predict(arr, verbose=0)[0]
            pred_class = CLASS_DESCRIPTIONS[int(np.argmax(preds))]
            pred_counter[pred_class] += 1
            st.write(f"**Predicted:** {pred_class}")

        if len(images) > 1:
            st.subheader("Aggregate Prediction Summary")
            fig, ax = plt.subplots(figsize=(8,4))
            labels, counts = zip(*pred_counter.items())
            ax.bar(labels, counts, color=plt.get_cmap("tab10").colors)
            ax.set_ylabel("Count")
            ax.set_xticklabels(labels, rotation=45, ha="right")
            for i, v in enumerate(counts):
                ax.text(i, v + 0.1, str(v), ha='center')
            ax.grid(axis='y', linestyle='--', alpha=0.6)
            st.pyplot(fig)

import base64
import streamlit as st

def add_logo_above_navbar(image_path: str, width: str = "80%", padding_top: str = "100px"):
    """
    تضيف صورة الخلفية فوق قائمة التنقل الجانبية.
    image_path: مسار الصورة (يفضل URL أو base64).
    width: حجم الصورة.
    padding_top: المسافة من الأعلى لتظهر بشكل واضح.
    """
    # قراءة الصورة وتحويلها إلى base64
    with open(image_path, "rb") as f:
        data = base64.b64encode(f.read()).decode()
    css = f"""
    <style>
    [data-testid="stSidebarNav"] {{
        background-image: url("data:image/png;base64,{data}");
        background-repeat: no-repeat;
        background-size: {width} auto;
        padding-top: {padding_top};
    }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

# مثال للاستخدام في بداية app.py
add_logo_above_navbar("assets/logo.png", width="70%", padding_top="120px")
# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAl6wvzzrYo733svr2f9xJpUQ1sNps3r
"""

import os
import zipfile
import io
import random
import streamlit as st
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from collections import Counter
import gdown
from tensorflow.keras.models import load_model

# -- Configuration --
MODEL_URL = "https://drive.google.com/uc?export=download&id=1j9WY-YbR4G-aRuv69C15WvF2CosN9KQ8"
MODEL_PATH = "model.keras"
IMAGE_SIZE = (224, 224)
CLASS_DESCRIPTIONS = [
    'safe driving', 'texting right', 'talking on phone right',
    'texting left', 'talking on phone left', 'operating radio',
    'drinking', 'reaching behind', 'hair and makeup', 'talking to passenger'
]
TOP_K = 3

@st.cache_resource
def get_model():
    if not os.path.exists(MODEL_PATH):
        st.info("Downloading model...")
        gdown.download(MODEL_URL, MODEL_PATH, quiet=False)
    model = load_model(MODEL_PATH)
    return model

model = get_model()

st.title("Distracted Driver Detection")
st.markdown("Upload a ZIP of images or multiple individual images. Single uploads skip aggregate visualizations.")

uploaded = st.file_uploader(
    "Upload ZIP or images",
    type=['zip','png','jpg','jpeg'],
    accept_multiple_files=True
)

import streamlit as st

st.sidebar.image(
    "https://cdljobs.com/news-notes/news/distracted-driving",
    use_container_width=True
)
st.sidebar.markdown("### تطبيق التنبؤ بتشتت السائق")

def extract_images_from_zip(zf_bytes):
    images = []
    with zipfile.ZipFile(io.BytesIO(zf_bytes)) as zf:
        for name in zf.namelist():
            if name.lower().endswith(('.png','.jpg','.jpeg')):
                data = zf.read(name)
                img = Image.open(io.BytesIO(data)).convert("RGB")
                images.append(img)
    return images

def get_top3(img):
    arr = np.array(img.resize(IMAGE_SIZE))/255.0
    arr = np.expand_dims(arr, axis=0)
    preds = model.predict(arr, verbose=0)[0]
    idx = preds.argsort()[::-1][:TOP_K]
    return [(CLASS_DESCRIPTIONS[i], preds[i]) for i in idx]

def plot_horizontal_bar(top3):
    labels, probs = zip(*top3[::-1])  # reverse for horizontal bar
    fig, ax = plt.subplots()
    colors = plt.get_cmap("tab10").colors
    ax.barh(labels, probs, color=colors[:len(labels)])
    for i, v in enumerate(probs):
        ax.text(v + 0.02, i, f"{v:.2f}", va='center')
    ax.set_xlabel("Probability")
    ax.set_title("Top-3 Predictions")
    return fig

def plot_summary(counter):
    fig, ax = plt.subplots(figsize=(8, 4))
    classes = list(counter.keys())
    vals = list(counter.values())
    colors = plt.get_cmap("tab10").colors[:len(classes)]
    ax.bar(classes, vals, color=colors)
    for i, v in enumerate(vals):
        ax.text(i, v + 0.1, str(v), ha='center')
    ax.set_ylabel("Count")
    ax.set_xticklabels(classes, rotation=45, ha='right')
    ax.grid(axis='y', linestyle='--', alpha=0.7)
    return fig

def make_montage(counter_examples):
    # picks one image per class if available
    thumb_size = (120, 80)
    cols = 5
    pad = 5
    caption_h = 20
    count = len(counter_examples)
    rows = (count + cols - 1) // cols
    W = cols * (thumb_size[0] + pad) + pad
    H = rows * (thumb_size[1] + caption_h + pad) + pad
    montage = Image.new("RGB", (W, H), (255,255,255))
    draw = ImageDraw.Draw(montage)
    try:
        font = ImageFont.truetype("arial.ttf", 12)
    except:
        font = ImageFont.load_default()
    for idx, (cls, img) in enumerate(counter_examples.items()):
        r, c = divmod(idx, cols)
        x = pad + c*(thumb_size[0]+pad)
        y = pad + r*(thumb_size[1]+caption_h+pad)
        thumb = img.resize(thumb_size)
        montage.paste(thumb, (x, y))
        draw.text((x, y+thumb_size[1]), cls, fill="black", font=font)
    return montage

imgs = []
for f in uploaded:
    if f.name.lower().endswith(".zip"):
        imgs.extend(extract_images_from_zip(f.read()))
    else:
        imgs.append(Image.open(f).convert("RGB"))

if imgs:
    st.subheader("Individual Predictions")
    summary_counter = Counter()
    examples = {}

    for img in imgs:
        top3 = get_top3(img)
        summary_counter[top3[0][0]] += 1
        if top3[0][0] not in examples:
            examples[top3[0][0]] = img
        st.image(img, caption=top3[0][0], width=200)
        st.pyplot(plot_horizontal_bar(top3))

    if len(imgs) > 1:
        st.subheader("Aggregate Summary")
        st.pyplot(plot_summary(summary_counter))

        st.subheader("Sample per Predicted Class")
        st.image(make_montage(examples), use_column_width=True)